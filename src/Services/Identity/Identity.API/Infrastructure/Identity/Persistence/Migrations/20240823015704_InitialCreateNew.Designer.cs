// <auto-generated />
using System;
using Identity.API.Infrastructure.Identity.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Identity.API.Infrastructure.Identity.Persistence.Migrations
{
    [DbContext(typeof(IdentityAppContext))]
    [Migration("20240823015704_InitialCreateNew")]
    partial class InitialCreateNew
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Identity.API.Infrastructure.Identity.Roles.IdentityAppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "identity");

                    b.HasData(
                        new
                        {
                            Id = "07ee934d-979e-446d-b9ae-5f52c2fa6784",
                            Name = "Master",
                            NormalizedName = "MASTER",
                            Notes = "Master role with complete software control."
                        },
                        new
                        {
                            Id = "e5c22b03-6542-40ea-a031-593d763fbb45",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Notes = "Administrator role with limited permissions."
                        },
                        new
                        {
                            Id = "22001a88-264d-4ce0-8591-c985653d8303",
                            Name = "User",
                            NormalizedName = "USER",
                            Notes = "User role with limited permissions."
                        });
                });

            modelBuilder.Entity("Identity.API.Infrastructure.Identity.Users.IdentityAppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "identity");

                    b.HasData(
                        new
                        {
                            Id = "d7d8d960-0d8e-4d63-a295-ec4fffb9ee90",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "191806dd-ffb6-436e-af70-bdd4ccde7fee",
                            DateOfBirth = new DateTime(2024, 8, 23, 1, 57, 3, 871, DateTimeKind.Utc).AddTicks(9662),
                            Email = "master@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            ImageUrl = "Image1",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MASTER",
                            NormalizedUserName = "MASTER",
                            Notes = "System Master",
                            PasswordHash = "AQAAAAIAAYagAAAAECaBa5hciv6WJ0sXKGwI/nRhmFbPmD0WvhHrp3bAtIB733FWONRn6Ws0ZRWDWTWP5Q==",
                            PhoneNumberConfirmed = false,
                            ProfileImage = new byte[] { 100, 0, 0, 0 },
                            SecurityStamp = "",
                            TenantId = "tenant_1",
                            TwoFactorEnabled = false,
                            UserName = "Master"
                        },
                        new
                        {
                            Id = "d63d3a99-afcd-4c0a-907c-e96acef0ce50",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1efdc423-b26a-4c6e-b5b1-73886173d2d6",
                            DateOfBirth = new DateTime(2024, 8, 23, 1, 57, 3, 928, DateTimeKind.Utc).AddTicks(322),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            ImageUrl = "Image2",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN",
                            NormalizedUserName = "ADMIN",
                            Notes = "System Administrator",
                            PasswordHash = "AQAAAAIAAYagAAAAEKeOHwMkhAAItWt+IJXUyVogCU5clQaGfNWUs+J1qJTw+/kQpasi1iA2MSCC1MBLng==",
                            PhoneNumberConfirmed = false,
                            ProfileImage = new byte[] { 200, 0, 0, 0 },
                            SecurityStamp = "",
                            TenantId = "tenant_1",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "e6116e71-c410-44ce-a1cd-77aabf01561f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7752c748-6849-4018-a35e-671bf6b84604",
                            DateOfBirth = new DateTime(2024, 8, 23, 1, 57, 3, 983, DateTimeKind.Utc).AddTicks(8951),
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            Gender = "Female",
                            ImageUrl = "Image3",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER",
                            NormalizedUserName = "USER",
                            Notes = "Regular User",
                            PasswordHash = "AQAAAAIAAYagAAAAEASpb2dYMg6fM2Ots6KAhY0ruiZdZ/uwqrEpGRUe4SLwRWV/iVtsia4uQupseO1MjA==",
                            PhoneNumberConfirmed = false,
                            ProfileImage = new byte[] { 44, 1, 0, 0 },
                            SecurityStamp = "",
                            TenantId = "tenant_1",
                            TwoFactorEnabled = false,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "identity");

                    b.HasData(
                        new
                        {
                            UserId = "d7d8d960-0d8e-4d63-a295-ec4fffb9ee90",
                            RoleId = "07ee934d-979e-446d-b9ae-5f52c2fa6784"
                        },
                        new
                        {
                            UserId = "d63d3a99-afcd-4c0a-907c-e96acef0ce50",
                            RoleId = "e5c22b03-6542-40ea-a031-593d763fbb45"
                        },
                        new
                        {
                            UserId = "e6116e71-c410-44ce-a1cd-77aabf01561f",
                            RoleId = "22001a88-264d-4ce0-8591-c985653d8303"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Identity.API.Infrastructure.Identity.Roles.IdentityAppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Identity.API.Infrastructure.Identity.Users.IdentityAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Identity.API.Infrastructure.Identity.Users.IdentityAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Identity.API.Infrastructure.Identity.Roles.IdentityAppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.API.Infrastructure.Identity.Users.IdentityAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Identity.API.Infrastructure.Identity.Users.IdentityAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
